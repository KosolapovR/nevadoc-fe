import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import axios from "axios";
import { URLS } from "../../api";

export interface Product {
  id: string;
  seller: string;
  name: string;
  pattern: string;
  color?: string;
  size?: string;
  sleeve?: string;
  material?: string;
  prints?: string;
}

export interface ProductsState {
  data: Product[];
  status: "idle" | "loading" | "failed";
}

const initialState: ProductsState = {
  data: [],
  status: "idle",
};

export const requestProductsAsync = createAsyncThunk(
  "products/fetchProducts",
  async () => {
    const response = await axios.get(URLS.getProducts());
    // The value we return becomes the `fulfilled` action payload
    return response?.data?.data;
  }
);

export const productsSlice = createSlice({
  name: "size",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    set: (state, action: PayloadAction<Product[]>) => {
      state.data = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(requestProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(requestProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      });
  },
});

export const { set } = productsSlice.actions;
export const selectProducts = (state: RootState) => state.products.data;
export default productsSlice.reducer;
