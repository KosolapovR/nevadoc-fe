import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import axios, { AxiosRequestConfig } from "axios";
import { URLS } from "../../api";
import { Product } from "../products/productsSlice";

export interface ParsedProducts extends Product {
  quantity: string;
  price: string;
  number: number;
}

export interface ParsedProductsState {
  data: ParsedProducts[];
  status: "idle" | "loading" | "failed";
}

const initialState: ParsedProductsState = {
  data: [],
  status: "idle",
};

export const requestParsedProductsAsync = createAsyncThunk(
  "parsedProducts/fetchParsedProducts",
  async (config: AxiosRequestConfig) => {
    const response = await axios.get(URLS.getParsedProducts(), config);
    // The value we return becomes the `fulfilled` action payload
    return response?.data?.data;
  }
);

export const parsedProductsSlice = createSlice({
  name: "parsedProducts",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(requestParsedProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(requestParsedProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      });
  },
});

export const selectParsedProducts = (state: RootState) =>
  state.parsedProducts.data.map((p, index) => ({ ...p, number: index + 1 }));
export const selectParsedProductsSum = (state: RootState) =>
  state.parsedProducts.data.reduce((sum, curr) => {
    if (!curr) {
      return sum;
    }
    return sum + +(curr.price || 0) * +curr.quantity;
  }, 0);
export default parsedProductsSlice.reducer;
